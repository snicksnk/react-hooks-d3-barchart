{"version":3,"sources":["components/scales.tsx","components/drawChart.ts","components/Chart.tsx","components/drawAxis.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["y","config","values","scaleBand","domain","range","size","height","paddingInner","paddingOuter","align","round","drawBar","scalesSet","leftOffset","topOffset","value","x","select","prototype","transition","d3Transition","Chart","svgRef","React","useRef","useEffect","lims","margin","top","right","bottom","left","width","chart","current","attr","append","titles","ChartConfig","margins","scaleLinear","nice","Scales","chartConfig","axisSet","xAxis","yAxis","call","drawAxis","axisBottom","ticks","tickSize","axisLeft","xScale","yScale","console","log","map","pair","item","n","length","bars","selectAll","data","enter","_","d","a","bandWidth","bandwidth","barSize","offset","text","drawChart","ref","id","filterUnits","primitiveUnits","color-interpolation-filters","stdDeviation","in","dx","dy","flood-color","flood-opacity","result","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.45b77582.chunk.js","sourcesContent":["import { scaleLinear, scaleBand } from 'd3-scale';\n\nimport { ChartConfigType } from './types';\n\nexport function x(config: ChartConfigType, lims: number[]) {\n  const xScale = scaleLinear()\n    .domain(lims)\n      .range([0, config.size.width])\n      .nice();\n  \n  return xScale;\n}\n\nexport function y(config: ChartConfigType, values: string[]) {\n  const yScale = scaleBand()\n    .domain(values)\n    .range([0, config.size.height])\n    .paddingInner(0.1)\n    .paddingOuter(0.2)\n    .align(0.9)\n    .round(true)\n\n  return yScale;\n}","import { Selection } from 'd3-selection';\nimport { ChartConfigType, AxisSetType, ScalesSetType, } from './types'\n\n\nfunction drawBar(scalesSet: ScalesSetType, leftOffset: number, topOffset: number, value: number, height: number):string {\n  return `M${leftOffset} ${topOffset}` + \n          `H ${scalesSet.x(value)}` + \n          `V ${topOffset + height}` + \n          `H ${leftOffset}` +\n          `L ${leftOffset} ${topOffset}`;\n}\n\nexport function drawChart(\n  config: ChartConfigType,\n  chart: Selection<SVGGElement, unknown, null, undefined>,\n  scalesSet: ScalesSetType,\n  titles: string[],\n  values: number[][]\n) {\n  const { x: xScale, y: yScale } = scalesSet;\n\n  console.log('values--', values.map(pair => (pair.map((item, n) => {\n    return { value: item, size: pair.length, n };\n  }))));\n  \n  const groups = chart\n    .selectAll('g.bar-group')\n    .data(values.map(pair => (pair.map((item, n) => {\n      return { value: item, size: pair.length, n };\n    }))))\n    .enter()\n      .append('g')\n      .attr('class', 'bar-group')\n      .attr(\"transform\", \n        (_, n) => `translate(0, ${yScale(`${titles[n]}`)})`)\n        \n        \n  const bars = groups.selectAll('path')\n        .data(item => item)\n          .enter()\n  \n  bars.append('path')\n    .attr('class', d => `bar bar-${d.n}`)\n    .attr(\"filter\", \"url(#filter)\")\n    .attr('d', (item, n, a) => {\n      const bandWidth = yScale.bandwidth();\n      const barsOffset = 3;\n      if (item.size > 1) {\n        const barSize = bandWidth / item.size;\n        const topOffset = barSize * item.n;\n        return drawBar(scalesSet, config.size.width / 2, topOffset, item.value, barSize - barsOffset);\n      } else {\n        return drawBar(scalesSet, config.size.width / 2, 0, item.value, bandWidth);\n      }\n    });\n\n  bars.append('text')\n    .attr('class', 'text')\n    .attr('text-anchor', item => {\n      if (item.value > 0) {\n        return 'end';\n      } else if (item.value < 0) {\n        return 'start';\n      } else {\n        return 'center';\n      }\n    })\n    .attr('dy', '+.2em')\n    .attr('x', d => {\n      const offset = d.value > 0 ? -3 : 3;\n      return xScale(d.value) + offset;\n    })\n    .attr('y', (d, n) => {\n      const bandWidth = yScale.bandwidth();\n      const barSize = bandWidth / d.size;\n      const topOffset = barSize * d.n + barSize / 2;\n      // const topOffset = barSize * d.n + barSize / 2; \n\n      return topOffset;\n    })\n    .text(d => d.value)\n}","import React, { useEffect } from 'react';\nimport { select } from 'd3-selection';\nimport { axisBottom, axisLeft } from 'd3-axis';\nimport { transition as d3Transition } from 'd3-transition';\n\nimport * as Scales from './scales';\n\nimport { ChartConfigType, AxisSetType, ScalesSetType } from './types'\nimport { drawChart } from './drawChart';\nimport { drawAxis } from './drawAxis';\n\n\nselect.prototype.transition = d3Transition;\n\n\nconst Chart = () => {\n  const svgRef = React.useRef<SVGSVGElement | null>(null);\n\n  useEffect(\n    () => {\n      const margin = {top: 20, right: 20, bottom: 20, left: 40};\n      const width = 800 - margin.left - margin.right;\n      const height = 450 - margin.top - margin.bottom;\n\n      const svg = select(svgRef.current)\n        .attr(\"width\", width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom)\n\n\n      const chart =  svg\n        .append('g')\n        .attr(\"transform\", \n          \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n\n      const values = [[10, 20], [-48, 50], [50], [-20, -25]];\n\n      const titles = ['Cats', 'Dogs', 'Birds', 'Cows'];\n\n      const ChartConfig: ChartConfigType = {\n        size: {\n          width,\n          height,\n        },\n        margins: margin\n      }\n\n      const limsX = [ -50, 50 ];\n\n      const scalesSet: ScalesSetType = {\n        x: Scales.x(ChartConfig, limsX),\n        y: Scales.y(ChartConfig, titles),\n      };\n\n      const axisSet: AxisSetType = {\n        x: axisBottom(scalesSet.x).ticks(10, \"s\").tickSize(-1 * height),\n        y: axisLeft(scalesSet.y),\n      };\n\n      drawAxis(ChartConfig, chart, axisSet);\n      drawChart(ChartConfig, chart, scalesSet, titles, values);\n\n\n    },\n    [svgRef.current]\n  )\n\n  return (\n    <svg ref={svgRef}>\n      <defs>\n        <filter id=\"filter\" x=\"-20%\" y=\"-20%\" width=\"140%\" height=\"140%\" filterUnits=\"objectBoundingBox\" primitiveUnits=\"userSpaceOnUse\" color-interpolation-filters=\"linearRGB\">\n\t        <feDropShadow stdDeviation=\"5 5\" in=\"SourceGraphic\" dx=\"5\" dy=\"5\" flood-color=\"#000000\" flood-opacity=\"0.5\" x=\"0%\" y=\"0%\" width=\"100%\" height=\"100%\" result=\"dropShadow\"/>\n        </filter>\n      </defs>\n      \n    </svg>\n  )\n};\n\nexport default Chart;\n\n\n/*\n\n          <feFlood flood-color=\"#000000\" flood-opacity=\"1\" result=\"COLOR-blue\" />\n          <feTurbulence baseFrequency=\".025\" type=\"fractalNoise\" numOctaves=\"3\" seed=\"0\" result=\"Texture\" />\n          <feOffset dx=\"-3\" dy=\"4\" in=\"SourceAlpha\" result=\"step1\"/>\n          <feDisplacementMap scale=\"17\" in=\"step1\" in2=\"Texture\" result=\"step2\" />\n          <feComposite operator=\"in\" in=\"Texture\" in2 = \"step2\" result=\"step3\"/>\n          <feComposite operator=\"in\" in=\"COLOR-blue\" in2=\"step3\" result=\"fill-filter\" />\n          <feMerge  result=\"merge2\">\n          <feMergeNode in=\"fill-filter\" />\n          </feMerge>\n\n*/","import { ChartConfigType, AxisSetType, ChartType } from './types'\n\nexport function drawAxis(chartConfig: ChartConfigType, chart: ChartType, axisSet: AxisSetType) {\n  const { x: xAxis, y: yAxis } = axisSet;\n\n  chart\n    .append(\"g\")\n      .attr(\"class\", \"axis x-axis\")\n      .attr(\"transform\", `translate(0, ${chartConfig.size.height})`)\n      .call(xAxis)\n\n  chart\n    .append(\"g\")\n      .attr(\"class\", \"axis y-axis\")\n      .attr(\"transform\", \"translate(0, 0)\")\n      .call(yAxis)\n}","import React from 'react';\nimport Chart from './components/Chart';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1 className=\"header\">Grouped bar chart</h1>\n      <Chart />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}